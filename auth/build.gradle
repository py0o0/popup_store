plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2024.0.0")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // 유레카
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework.security:spring-security-crypto'

    // JWT 처리, 버전은 참고
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    //카프카
    implementation 'org.apache.kafka:kafka-streams'
    implementation 'org.springframework.kafka:spring-kafka'
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    // jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // 향후 추가
    // kafka : 주문, 결제 등을 이벤트 발생 시 송수신 처리 등등 비동기 구성 -> 메세징 서비스
    //         서비스간 통신용도
    // implementation 'org.apache.kafka:kafka-streams'
    // implementation 'org.springframework.kafka:spring-kafka'

    // (*)Jackson | gson : JSON 데이터 처리 -> 데이터 형태 파싱

    // actuator
    // 모니터링, 메트릭수집(성능측정), 환경정보, 로그관리, 헬스 체크
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // 회원가입 -> 이메일 입력 -> 서비스 운영자 입장(이메일이 유효한가?)
    // -> 인증 링크를 메일로 전송 -> 본인 이메일 확인 -> 클릭 -> 인증된 유저가 됨
    // smtp 프로토콜(메일전송)을 지원하는 이메일 서비스 필요!!
    // 구글 메일 활용 -> 서비스 신청개념 -> 구글 계정 -> 보안 -> 검색(앱 비밀번호) -> 앱 생성 -> 비번발급
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version: '3.0.5'
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    implementation 'org.springframework.boot:spring-boot-starter-websocket'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}